-- -------------------
-- SQL 기본 - 함수
-- -------------------


-- -------------------
-- 함수의 개념 및 종류
-- -------------------
-- 함수(Function)의 정의 : 특정 작업을 수행하기 위해 미리 정의된 명령어

-- 종류
-- 1. 단일행 함수(Single-row Functions): 행별로 하나의 결과를 반환
-- 2. 다중행 함수(Multi-row Functions): 여러 행의 값을 입력받아 하나의 결과를 반환

-- 예시 : 
-- 단일행 함수 예시 (UPPER: 각 행별로 처리)
-- UPPER(name) name컬럼의 값을 대문자로 변환해준다 각행마다 처리
SELECT userID, UPPER(name) AS upper_name FROM userTbl;

-- 다중행 함수 예시 (COUNT: 여러 행을 묶어서 처리)
-- 각 지역(addr)별 사용자 수를 집계 (COUNT(*): 그룹 내 행 개수 계산)
SELECT addr, COUNT(*) AS user_count FROM userTbl GROUP BY addr;



-- --------------------- --------------------- -------------------
--                          단일행 함수
-- --------------------- --------------------- -------------------
-- -------------------
-- 단일행 함수-문자형 함수
-- -------------------
-- LOWER, UPPER, INITCAP: 대소문자 변환
-- LENGTH, LENGTHB: 문자열 길이 반환
-- SUBSTR: 문자열 일부 추출
-- INSTR: 특정 문자 위치 찾기
-- LPAD, RPAD: 문자열 채우기
-- TRIM, LTRIM, RTRIM: 공백 제거
-- REPLACE: 문자열 치환
-- CONCAT: 문자열 연결

-- 예시코드:

-- 대소문자 변환
SELECT userID,
       LOWER(userID) AS lower_id,         -- 소문자 변환
       UPPER(name) AS upper_name,         -- 대문자 변환
       INITCAP(LOWER(name)) AS init_cap   -- 첫 글자만 대문자로 변환
FROM userTbl;

-- 문자열 길이
SELECT name, 
       LENGTH(name) AS name_length,       -- 이름의 문자 개수
       LENGTH(addr) AS addr_length        -- 주소의 문자 개수
FROM userTbl;

-- 문자열 추출
SELECT name,
       SUBSTR(name, 1, 1) AS first_char,  -- 이름의 첫 글자
       SUBSTR(userID, 2) AS userid_part   -- userID의 두 번째 문자부터 끝까지
FROM userTbl;

-- 문자 위치 찾기
SELECT name, 
       INSTR(name, '김') AS position_kim   -- '김'이 있는 위치 (없으면 0)
FROM userTbl;

-- 문자열 채우기
SELECT userID,
       LPAD(userID, 10, '*') AS lpad_id,  -- userID 왼쪽을 *로 채워 10자리로
       RPAD(name, 10, '-') AS rpad_name   -- name 오른쪽을 -로 채워 10자리로
FROM userTbl;

-- 공백 제거
SELECT TRIM(' SQL ') AS trim_result,      -- 양쪽 공백 제거: 'SQL'
       LTRIM(' SQL ') AS ltrim_result,    -- 왼쪽 공백 제거: 'SQL '
       RTRIM(' SQL ') AS rtrim_result     -- 오른쪽 공백 제거: ' SQL'
FROM dual;

-- 문자열 치환
SELECT name,
       REPLACE(mobile1, NULL, '없음') AS replace_null,   -- NULL을 '없음'으로 대체
       REPLACE(addr, '서울', 'SEOUL') AS replace_addr   -- '서울'을 'SEOUL'로 대체
FROM userTbl;

-- 문자열 연결
SELECT name,
       CONCAT(mobile1, '-') AS part1,                    -- 휴대폰 국번과 '-' 연결
       CONCAT(CONCAT(mobile1, '-'), mobile2) AS mobile,  -- 국번-전화번호 형식으로 연결
       mobile1 || '-' || mobile2 AS phone_number        -- 연결 연산자 사용
FROM userTbl;


-- -------------------
-- 단일행 함수-숫자형 함수
-- -------------------
-- ROUND: 반올림
-- TRUNC: 절삭
-- CEIL, FLOOR: 올림, 내림
-- MOD: 나머지 구하기
-- ABS: 절대값
-- SIGN: 부호 확인
-- POWER: 제곱
-- SQRT: 제곱근

-- 예시코드:

-- buyTbl 테이블의 가격 데이터 활용
-- 반올림, 절삭
SELECT prodName, price,
       ROUND(price/1000, 2) AS round_thousands,    -- 천 단위로 나누고 소수점 2자리 반올림
       TRUNC(price/1000, 1) AS trunc_thousands     -- 천 단위로 나누고 소수점 1자리 절삭
FROM buyTbl;

-- 올림, 내림
SELECT prodName, price,
       CEIL(price/100) AS ceil_hundreds,           -- 백 단위로 나누고 올림
       FLOOR(price/100) AS floor_hundreds          -- 백 단위로 나누고 내림
FROM buyTbl;

-- 나머지, 절대값
SELECT prodName, price, amount,
       MOD(price, 100) AS remainder_100,           -- 가격을 100으로 나눈 나머지
       ABS(price - 500) AS abs_diff_500            -- 가격과 500의 차이의 절대값
FROM buyTbl;

-- 부호, 제곱, 제곱근
SELECT prodName, price,
       SIGN(price - 100) AS sign_price,            -- 가격이 100보다 크면 1, 같으면 0, 작으면 -1
       POWER(amount, 2) AS amount_squared,         -- 수량의 제곱
       SQRT(price) AS sqrt_price                   -- 가격의 제곱근
FROM buyTbl;


-- -------------------
-- 단일행 함수-날짜형 함수
-- -------------------

-- SYSDATE, CURRENT_DATE: 현재 날짜
-- ADD_MONTHS: 월 더하기
-- MONTHS_BETWEEN: 월 차이 계산
-- NEXT_DAY: 다음 요일 날짜
-- LAST_DAY: 월의 마지막 날짜
-- EXTRACT: 날짜 요소 추출
-- TO_CHAR: 날짜를 문자로 변환
-- TO_DATE: 문자를 날짜로 변환

-- 예시코드 : 

-- 현재 날짜와 회원 가입일 활용
SELECT name, mDate,
       SYSDATE AS today,                             -- 현재 날짜/시간
       CURRENT_DATE AS current_date                  -- 현재 날짜
FROM userTbl;

-- 날짜 연산
SELECT name, mDate,
       mDate + 7 AS after_week,                      -- 가입일 1주일 후
       mDate - 7 AS before_week                      -- 가입일 1주일 전
FROM userTbl;

-- 월 관련 함수
SELECT name, mDate,
       ADD_MONTHS(mDate, 6) AS after_6months,        -- 가입일 6개월 후
       MONTHS_BETWEEN(SYSDATE, mDate) AS months_since_join  -- 가입 후 경과 월 수
FROM userTbl;

-- 요일, 말일 함수
SELECT name, mDate,
       NEXT_DAY(mDate, '금요일') AS next_friday,      -- 가입일 이후의 첫 금요일
       LAST_DAY(mDate) AS last_day_of_month          -- 가입월의 마지막 날짜
FROM userTbl;

-- 날짜 요소 추출
SELECT name, mDate,
       EXTRACT(YEAR FROM mDate) AS join_year,        -- 가입 연도
       EXTRACT(MONTH FROM mDate) AS join_month,      -- 가입 월
       EXTRACT(DAY FROM mDate) AS join_day           -- 가입 일
FROM userTbl;


-- -------------------
-- 단일행 함수-변환 함수
-- -------------------
-- TO_CHAR: 숫자 또는 날짜를 문자로 변환
-- TO_NUMBER: 문자를 숫자로 변환
-- TO_DATE: 문자를 날짜로 변환
-- 암시적 형변환과 명시적 형변환의 차이

-- 예시코드:

-- 날짜 → 문자 변환
SELECT name, mDate,
       TO_CHAR(mDate, 'YYYY-MM-DD') AS formatted_date,            -- 2008-08-08 형식
       TO_CHAR(mDate, 'YYYY"년" MM"월" DD"일"') AS korean_date,   -- 2008년 08월 08일 형식
       TO_CHAR(mDate, 'YYYY/MM/DD HH24:MI:SS') AS date_with_time  -- 시간 포함 형식
FROM userTbl;

-- 숫자 → 문자 변환
SELECT prodName, price, amount,
       TO_CHAR(price, '999,999') AS formatted_price,             -- 1,000 형식
       TO_CHAR(price * amount, '999,999') AS total,              -- 수량*가격 천단위 구분
       TO_CHAR(price/1000, '0.00') AS price_thousands            -- 소수점 표시
FROM buyTbl;

-- 문자 → 숫자 변환
SELECT TO_NUMBER('1,000', '9,999') AS number_result,             -- 문자 '1,000'을 숫자 1000으로
       TO_NUMBER('￦2,000', 'L9,999') AS currency_to_number      -- 통화 기호가 있는 문자를 숫자로
FROM dual;

-- 문자 → 날짜 변환
SELECT TO_DATE('2023-12-25', 'YYYY-MM-DD') AS christmas,         -- 문자열을 날짜로
       TO_DATE('20231225', 'YYYYMMDD') AS christmas_no_sep,      -- 구분자 없는 문자열을 날짜로
       TO_DATE('2023/12/25 14:30:00', 'YYYY/MM/DD HH24:MI:SS') AS christmas_time -- 시간 포함
FROM dual;

-- 암시적 형변환 예시
SELECT name, birthYear, 
       birthYear + 100 AS after_100years  -- 문자열이 자동으로 숫자로 변환
FROM userTbl;


-- -------------------
-- 단일행 함수 - NULL 관련 함수
-- -------------------
-- NVL: NULL 값을 다른 값으로 대체
-- NVL2: NULL 여부에 따라 값 반환
-- NULLIF: 두 표현식이 같으면 NULL 반환
-- COALESCE: 최초의 NULL이 아닌 값 반환

-- NVL 함수
SELECT name, mobile1, mobile2,
       NVL(mobile1, '없음') AS nvl_mobile1,         -- NULL이면 '없음' 반환
       NVL(height, 0) AS nvl_height                -- NULL이면 0 반환
FROM userTbl;

-- NVL2 함수
SELECT name, mobile1,
       NVL2(mobile1, '연락처 있음', '연락처 없음') AS contact_status,  -- NULL이 아니면 첫번째 값, NULL이면 두번째 값
       NVL2(mobile1, mobile1 || '-' || mobile2, '연락처 없음') AS full_mobile -- NULL 여부에 따른 처리
FROM userTbl;

-- NULLIF 함수
SELECT prodName, price, amount,
       NULLIF(price, 30) AS nullif_price       -- price가 30이면 NULL, 아니면 price 반환
FROM buyTbl;

-- COALESCE 함수
SELECT name, 
       COALESCE(mobile1, mobile2, '연락처 없음') AS contact,   -- 첫번째 NULL 아닌 값 반환
       COALESCE(NULL, NULL, '모두 NULL') AS test_coalesce      -- 모두 NULL이면 마지막 값 반환
FROM userTbl;


-- -------------------
-- 단일행 함수 - 조건부 함수
-- -------------------
-- DECODE: 조건에 따른 값 선택 (Oracle)
-- CASE: 조건에 따른 값 선택 (표준 SQL)

예시코드 : 
-- DECODE 함수 (Oracle 전용)
SELECT name, addr,
       DECODE(addr, 
              '서울', '수도권', 
              '경기', '수도권',
              '경남', '경상권',
              '경북', '경상권',
              '전남', '전라권',
              '기타') AS region
FROM userTbl;

-- 단순 CASE 표현식
SELECT userID, prodName,
       CASE groupName
           WHEN '전자' THEN '디지털'
           WHEN '의류' THEN '패션'
           WHEN '서적' THEN '교육'
           ELSE '기타'
       END AS category
FROM buyTbl;

-- 검색 CASE 표현식
SELECT name, height,
       CASE 
           WHEN height >= 180 THEN '키 큼'
           WHEN height >= 170 THEN '보통'
           WHEN height IS NOT NULL THEN '키 작음'
           ELSE '미기재'
       END AS height_grade
FROM userTbl;

-- 복합 조건 CASE
SELECT prodName, price, amount,
       CASE
           WHEN price * amount >= 1000 THEN '고가 구매'
           WHEN price * amount >= 500 THEN '중간 구매'
           ELSE '일반 구매'
       END AS purchase_type
FROM buyTbl;


-- --------------------- --------------------- -------------------
--                          다중행 함수
-- --------------------- --------------------- -------------------
-- -------------------
-- 다중행 함수-그룹함
-- -------------------

-- COUNT: 행의 개수 계산
-- SUM: 합계
-- AVG: 평균
-- MAX, MIN: 최대값, 최소값
-- STDDEV: 표준편차
-- VARIANCE: 분산
-- GROUP BY 절과 함께 사용

예시코드:

-- 기본 집계 함수
SELECT COUNT(*) AS user_count,                 -- 전체 사용자 수
       COUNT(mobile1) AS mobile_count,         -- 휴대폰 번호 있는 사용자 수
       MAX(height) AS max_height,              -- 최대 키
       MIN(height) AS min_height,              -- 최소 키
       AVG(height) AS avg_height,              -- 평균 키
       ROUND(STDDEV(height), 2) AS height_stddev,  -- 키의 표준편차
       ROUND(VARIANCE(height), 2) AS height_var    -- 키의 분산
FROM userTbl;

-- 지역별 사용자 통계
SELECT addr,
       COUNT(*) AS user_count,
       MAX(height) AS max_height,
       MIN(height) AS min_height,
       ROUND(AVG(height), 1) AS avg_height
FROM userTbl
GROUP BY addr
ORDER BY user_count DESC;

-- 출생연도별 사용자 수
SELECT birthYear,
       COUNT(*) AS user_count,
       ROUND(AVG(height), 1) AS avg_height
FROM userTbl
GROUP BY birthYear
ORDER BY birthYear;

-- 구매 테이블 분석
SELECT groupName,
       COUNT(*) AS purchase_count,
       SUM(amount) AS total_amount,
       SUM(price * amount) AS total_price,
       ROUND(AVG(price), 0) AS avg_price
FROM buyTbl
WHERE groupName IS NOT NULL
GROUP BY groupName
ORDER BY total_price DESC;

-- HAVING 절 사용
SELECT userID, SUM(price * amount) AS total_purchase
FROM buyTbl
GROUP BY userID
HAVING SUM(price * amount) >= 100
ORDER BY total_purchase DESC;


-- ---------------------------------
-- 분석 함수 (Window Functions)
-- ---------------------------------
-- RANK, DENSE_RANK, ROW_NUMBER: 순위 관련 함수
-- LEAD, LAG: 이전/이후 행 참조
-- FIRST_VALUE, LAST_VALUE: 첫번째/마지막 값
-- OVER 절의 활용
-- PARTITION BY와 ORDER BY 활용

-- 예시코드 : 
-- 키 기준 순위 함수
SELECT name, height,
       RANK() OVER (ORDER BY height DESC) AS height_rank,
       DENSE_RANK() OVER (ORDER BY height DESC) AS dense_rank,
       ROW_NUMBER() OVER (ORDER BY height DESC) AS row_num
FROM userTbl;

-- 지역별 키 순위
SELECT name, addr, height,
       RANK() OVER (PARTITION BY addr ORDER BY height DESC) AS local_rank
FROM userTbl;

-- 이전/이후 행 참조
SELECT name, birthYear, height,
       LAG(name, 1, '없음') OVER (ORDER BY birthYear) AS prev_person,
       LEAD(name, 1, '없음') OVER (ORDER BY birthYear) AS next_person
FROM userTbl;

-- 지역별 최대/최소 키 사용자
SELECT name, addr, height,
       FIRST_VALUE(name) OVER (PARTITION BY addr ORDER BY height DESC) AS tallest_in_region,
       LAST_VALUE(name) OVER (
           PARTITION BY addr 
           ORDER BY height DESC
           RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       ) AS shortest_in_region
FROM userTbl;

-- 누적 구매액
SELECT userID, num, prodName, price * amount AS purchase_amount,
       SUM(price * amount) OVER (PARTITION BY userID ORDER BY num) AS cumulative_amount
FROM buyTbl
ORDER BY userID, num;


-- ---------------------------------
-- 함수 사용 시 주의사항
-- ---------------------------------
-- NULL 값 처리 방법
-- 데이터 타입 변환 시 주의점
-- 성능에 미치는 영향
-- 단일행/다중행 함수 혼합 사용 시 주의사항

예시코드 : 
-- NULL 처리 주의사항
SELECT 
    COUNT(*) AS total_users,           -- 전체 사용자 수
    COUNT(mobile1) AS with_mobile,     -- 휴대폰 번호 있는 사용자 수
    AVG(height) AS wrong_avg,          -- NULL 제외한 평균 키
    SUM(height)/COUNT(*) AS real_avg   -- 전체 사용자 기준 평균 키 (NULL 포함)
FROM userTbl;

-- 암시적 형변환 주의
SELECT * FROM userTbl
WHERE birthYear = '1979';  -- 문자를 숫자로 변환 (인덱스 사용 불가 가능성)

-- 성능 영향 예시
SELECT * FROM userTbl
WHERE SUBSTR(name, 1, 1) = '김';  -- 함수 사용으로 인덱스 활용 불가

-- 대안 (성능 개선)
SELECT * FROM userTbl
WHERE name LIKE '김%';  -- 인덱스 활용 가능

-- 단일행/다중행 함수 혼합 오류
SELECT name, AVG(height)  -- 오류! 집계함수와 비집계 칼럼 혼합
FROM userTbl;

-- 올바른 방법
SELECT addr, AVG(height)
FROM userTbl
GROUP BY addr;


-- ---------------------------------
-- 데이터베이스별 함수 차이
-- ---------------------------------
-- Oracle, SQL Server, MySQL, PostgreSQL 등의 차이점
-- 표준 SQL 함수와 벤더별 확장 함수

-- 예시코드 : 
-- Oracle 문자열 연결
SELECT name || '님의 키는 ' || height || 'cm입니다.' AS result FROM userTbl;

-- SQL Server 문자열 연결
SELECT name + '님의 키는 ' + CAST(height AS VARCHAR) + 'cm입니다.' AS result FROM userTbl;

-- MySQL 문자열 연결
SELECT CONCAT(name, '님의 키는 ', height, 'cm입니다.') AS result FROM userTbl;

-- Oracle 날짜 함수
SELECT SYSDATE FROM dual;  -- Oracle

-- SQL Server 날짜 함수
SELECT GETDATE();  -- SQL Server

-- MySQL 날짜 함수
SELECT NOW();  -- MySQL

-- NVL 함수 비교
SELECT name, NVL(mobile1, '없음') FROM userTbl;  -- Oracle
SELECT name, ISNULL(mobile1, '없음') FROM userTbl;  -- SQL Server
SELECT name, IFNULL(mobile1, '없음') FROM userTbl;  -- MySQL
SELECT name, COALESCE(mobile1, '없음') FROM userTbl;  -- 표준 SQL

-- DECODE 함수 (Oracle)와 CASE 표현식 (표준) 비교
-- Oracle 전용
SELECT name, DECODE(addr, '서울', '수도권', '경기', '수도권', '지방') FROM userTbl;

-- 모든 DBMS 공통
SELECT name, 
    CASE 
        WHEN addr IN ('서울', '경기') THEN '수도권'
        ELSE '지방'
    END
FROM userTbl;


-- ---------------------------------
-- 실습 문제 및 예제
-- ---------------------------------
-- 단일행 함수 활용 예제
-- 다중행 함수 활용 예제
-- 실무에서 자주 사용되는 함수 조합
-- SQLD 기출 문제 분석

-- 예시코드:
-- 예제 1: 전화번호 형식화하기
SELECT name, 
    CASE 
        WHEN mobile1 IS NOT NULL THEN '(' || mobile1 || ') ' || SUBSTR(mobile2, 1, 4) || '-' || SUBSTR(mobile2, 5)
        ELSE '연락처 없음'
    END AS formatted_mobile
FROM userTbl;

-- 예제 2: 연령대별 사용자 수 및 평균 키
SELECT 
    FLOOR((2023 - birthYear) / 10) * 10 || '대' AS age_group,
    COUNT(*) AS user_count,
    ROUND(AVG(height), 1) AS avg_height
FROM userTbl
GROUP BY FLOOR((2023 - birthYear) / 10) * 10
ORDER BY age_group;

-- 예제 3: 가입년도별 사용자 수
SELECT 
    EXTRACT(YEAR FROM mDate) AS join_year,
    COUNT(*) AS user_count,
    ROUND(AVG(EXTRACT(YEAR FROM mDate) - birthYear), 1) AS avg_age_at_join
FROM userTbl
GROUP BY EXTRACT(YEAR FROM mDate)
ORDER BY join_year;

-- 예제 4: 사용자별 총 구매금액 및 등급
SELECT u.userID, u.name,
       NVL(SUM(b.price * b.amount), 0) AS total_purchase,
       CASE 
           WHEN SUM(b.price * b.amount) > 1000 THEN 'VIP'
           WHEN SUM(b.price * b.amount) > 100 THEN '우수 고객'
           WHEN SUM(b.price * b.amount) > 0 THEN '일반 고객'
           ELSE '미구매 고객'
       END AS customer_grade
FROM userTbl u
LEFT JOIN buyTbl b ON u.userID = b.userID
GROUP BY u.userID, u.name
ORDER BY total_purchase DESC;

-- 예제 5: 상품 카테고리별 판매 현황
SELECT 
    NVL(groupName, '기타') AS category,
    COUNT(DISTINCT userID) AS customer_count,
    COUNT(*) AS purchase_count,
    SUM(amount) AS total_amount,
    SUM(price * amount) AS total_sales,
    ROUND(AVG(price), 2) AS avg_price,
    MAX(price) AS max_price
FROM buyTbl
GROUP BY ROLLUP(groupName);

-- 예제 6: 지역별 키가 가장 큰 사용자 찾기
SELECT addr, name, height
FROM (
    SELECT addr, name, height,
           RANK() OVER (PARTITION BY addr ORDER BY height DESC) AS height_rank
    FROM userTbl
) ranked
WHERE height_rank = 1;

-- SQLD 기출 유형: 문자열 처리 및 형식화
SELECT 
    userID,
    RPAD(SUBSTR(name, 1, 1), LENGTH(name), '*') AS masked_name,
    EXTRACT(YEAR FROM mDate) AS join_year,
    2023 - birthYear AS korean_age
FROM userTbl;

-- SQLD 기출 유형: 복합 조건 및 집계
SELECT addr,
       COUNT(*) AS user_count,
       COUNT(CASE WHEN height >= 175 THEN 1 END) AS tall_count,
       ROUND(AVG(height), 1) AS avg_height,
       ROUND(AVG(2023 - birthYear), 1) AS avg_age
FROM userTbl
GROUP BY addr
HAVING COUNT(*) >= 2
ORDER BY user_count DESC;


-- ---------------------------------
-- 단일행 함수-변환 함수
-- ---------------------------------