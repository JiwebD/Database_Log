-- --------------------------- ---------------------------
--                    SQL 활용 - 서브쿼리
-- --------------------------- ---------------------------

-- ---------------------------
-- 서브 쿼리(Subquery)
-- ---------------------------
--의미 : 
--서브 쿼리는 SQL 문장 내에 포함된 또 다른 SQL 문장으로, 
--메인 쿼리가 서브 쿼리를 포함하는 종속적인 관계입니다.


--특징:
--괄호 () 안에 작성합니다.
--단일 행 또는 복수 행 비교 연산자와 함께 사용됩니다.
--서브 쿼리는 메인 쿼리가 실행되기 전에 한 번만 실행됩니다.
--ORDER BY는 서브 쿼리에서 사용할 수 없습니다(단, TOP이나 ROWNUM과 함께 사용하는 경우 제외).

-- ---------------------------
-- 유형-1 반환되는 데이터 행수에 따른 분류
-- ---------------------------


-- -------------
-- 단일 행
-- -------------
--단일 행 서브 쿼리(Single Row Subquery)
--
--서브 쿼리의 실행 결과가 한 행만 반환
--단일 행 비교 연산자 사용: =, >, <, >=, <=, <>

-- 김경호보다 키가 큰 사용자 조회
SELECT userID, name, height 
FROM userTbl
WHERE height > (SELECT height FROM userTbl WHERE name = '김경호');

-- -------------
-- 다중 행
-- -------------

--다중 행 서브 쿼리(Multiple Row Subquery)
--
--서브 쿼리의 실행 결과가 여러 행 반환
--다중 행 비교 연산자 사용: IN, ANY, ALL, EXISTS

-- 경남 지역에 사는 사용자와 같은 키를 가진 사용자 조회
SELECT userID, name, addr, height
FROM userTbl
WHERE height IN (SELECT height FROM userTbl WHERE addr = '경남');

SELECT height FROM userTbl WHERE addr = '경남';
-- ANY
-- 서브쿼리 결과 중 하나라도 조건을 만족하면 true
-- >= ANY는 "경남 사람들 중 가장 작은 키 이상인 사람들을 찾는 것"과 같다.
-- 경남지역의 사람 키가 (160,170,180)이라면, 
-- height >= ANY(...)  ==  height >= 160과 같다.
SELECT userID, name, addr, height
FROM userTbl
WHERE height >= ANY(SELECT height FROM userTbl WHERE addr = '경남');

-- ALL
-- 서브쿼리 결과 모든 값을 만족하면 true
-- >= ALL은 "경남 사람들 중 가장 큰 키보다 크거나 같은 사람들"을 찾는 것과 같다.
-- 경남 사람들의 키가 (160, 170, 180)이라면, 
-- height >= ALL(...) == height >= 180과 같다.
SELECT userID, name, addr, height
FROM userTbl
WHERE height >= ALL(SELECT height FROM userTbl WHERE addr = '경남');


-- -------------
-- 다중 컬럼
-- -------------

-- 주소별로 가장 키가 큰 사람들 조회
SELECT userID, name, addr, height
FROM userTbl
WHERE (addr, height) IN (SELECT addr, MAX(height) FROM userTbl GROUP BY addr);

SELECT addr, MAX(height) FROM userTbl GROUP BY addr;

-- ---------------------------
-- 유형-2 서브 쿼리 위치에 따른 분류
-- ---------------------------

-- -------------
--WHERE 절에 사용되는 서브 쿼리
-- -------------
--가장 많이 사용되는 형태

-- 평균 키보다 큰 사용자 조회
SELECT userID, name, height 
FROM userTbl 
WHERE height > (SELECT AVG(height) FROM userTbl);

-- -------------
-- SELECT 절에 사용되는 서브 쿼리 (스칼라 서브 쿼리)
-- -------------

--한 행, 한 컬럼만 반환해야 함

-- 각 사용자의 구매 총액 계산
SELECT u.userID, u.name, 
       (SELECT SUM(price*amount) FROM buyTbl b WHERE b.userID = u.userID) AS 총구매액
FROM userTbl u;


-- -------------------------------
-- 문제
-- -------------------------------
--1.
--서울 지역에 거주하는 회원 중, 전체 평균 키보다 큰 회원의 이름과 키를 조회하는 SQL문을 작성하시오.

s

-- join 사용
select name, height
from(
    select name, addr, height
    from usertbl
    where height > (
        select avg(height)
       from usertbl
    )
)
where addr = '서울'
;


--2.
--물품을 한 번이라도 구매한 적이 있는 회원의 이름과 주소를 조회하는 SQL문을 작성하시오.
--(단, buyTbl의 userID 기준)
select u.name, u.addr
from usertbl u
left join buytbl b
on u.userid = b.userid
where b.userid is not null
;

--3.
--‘전자’ 분류 상품 중 가장 비싼 상품을 구매한 회원의 이름과 상품명, 가격을 조회하는 SQL문을 작성하시오.

select u.name, b.prodname, b.price
from usertbl u
join buytbl b
on u.userid = b.userid
where b.price >= ALL(select price from buytbl where groupname = '전자');


--4.
--각 회원이 구매한 총 금액(price × amount)의 평균보다 더 많이 구매한 회원의 이름과 총 구매 금액을 조회하는 SQL문을 작성하시오.
select u.name, sum(price*amount) as "총 구매 금액"
from usertbl u
join buytbl b
on u.userid = b.userid
group by u.name
having sum(price*amount) >= (select avg(price*amount) from buytbl);



--5.
--한 번도 물건을 구매한 적 없는 회원의 이름과 가입일을 조회하는 SQL문을 작성하시오.
select u.name, u.mdate
from usertbl u
left join buytbl b
on u.userid = b.userid
where b.userid is not null;

--6.
--청바지를 구매한 회원들과 같은 지역에 사는 다른 회원들의 이름과 지역을 조회하는 SQL문을 작성하시오.
--(단, 청바지를 구매한 사람은 제외)

--7.
--각 회원의 userID와 그 회원이 구매한 가장 비싼 물품의 이름과 가격을 조회하는 SQL문을 작성하시오.

--8.
--‘운동화’를 구매한 회원의 수보다 더 많은 회원이 있는 지역명을 조회하는 SQL문을 작성하시오.

--9.
--자신이 구매한 상품 중 ‘책’보다 비싼 상품을 구매한 회원의 이름과 상품명을 조회하는 SQL문을 작성하시오.
--(연관 서브쿼리 사용)

--10.
--모든 회원의 평균 키보다 키가 작은 회원이 구매한 상품의 이름과 수량을 조회하는 SQL문을 작성하시오.
